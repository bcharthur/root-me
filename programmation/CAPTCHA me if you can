import base64
import numpy as np
import cv2
from PIL import Image, ImageEnhance, ImageFilter
from io import BytesIO
import easyocr
import re
import sys
import time
import requests
from bs4 import BeautifulSoup
from colorama import Fore, Style, init
import string
import os
import sys
import contextlib

# Initialisation de colorama
init(autoreset=True)

# URL de la page du challenge Root Me
url = 'http://challenge01.root-me.org/programmation/ch8/'
domain = 'challenge01.root-me.org'

# PHPSESSID récupéré de la session Root Me
cookies = {'PHPSESSID': 'fb496fb3002d07e0140ee424a521e006'}

# Suppression du message initial de EasyOCR en redirigeant temporairement stdout
@contextlib.contextmanager
def suppress_stdout():
    with open(os.devnull, 'w') as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:
            yield
        finally:
            sys.stdout = old_stdout

# Initialiser le lecteur EasyOCR sans afficher les messages de démarrage
with suppress_stdout():
    reader = easyocr.Reader(['en'])  # Vous pouvez ajouter d'autres langues si nécessaire

# Dossier pour enregistrer les images prétraitées (facultatif)
PROCESSED_IMAGES_DIR = 'processed_images'
if not os.path.exists(PROCESSED_IMAGES_DIR):
    os.makedirs(PROCESSED_IMAGES_DIR)

def preprocess_image(img):
    """
    Fonction pour prétraiter l'image du CAPTCHA.
    """
    # Convertir en niveaux de gris
    img = img.convert('L')

    # Convertir en tableau numpy
    img_np = np.array(img)

    # Redimensionner l'image pour améliorer la précision de l'OCR
    img_np = cv2.resize(img_np, None, fx=2, fy=2, interpolation=cv2.INTER_LINEAR)

    # Appliquer un flou gaussien léger pour réduire le bruit
    img_np = cv2.GaussianBlur(img_np, (3, 3), 0)

    # Binarisation avec seuil Otsu
    _, img_np = cv2.threshold(img_np, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # Suppression des petits objets
    contours, _ = cv2.findContours(img_np, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 50:
            cv2.drawContours(img_np, [cnt], 0, (255, 255, 255), -1)

    # Dilatation légère
    kernel = np.ones((1, 1), np.uint8)
    img_np = cv2.dilate(img_np, kernel, iterations=1)

    # Convertir de retour en image PIL
    img = Image.fromarray(img_np)

    # Augmenter le contraste
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(2)

    # Appliquer un filtre de netteté
    img = img.filter(ImageFilter.SHARPEN)

    return img

def save_image(img, iteration):
    """
    Fonction pour enregistrer les images prétraitées (pour débogage).
    """
    img_path = os.path.join(PROCESSED_IMAGES_DIR, f'captcha_{iteration}.png')
    img.save(img_path)

def main():
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("===================================")
    print("  CAPTCHA Me if You Can - Root Me")
    print("  Programmation - 20 points")
    print("")
    print("  Présenté par br0nson")
    print("  LinkedIn : t.ly/fra3R ")
    print("===================================")
    print("")

    print(f"{Fore.GREEN}Démarrage du script de scraping...{Style.RESET_ALL}")
    print("")

    session = requests.Session()
    session.cookies.update(cookies)

    MAX_ATTEMPTS = 100  # Nombre maximal de tentatives
    attempt = 0

    # Enregistrer le temps de début
    start_time_total = time.time()

    while attempt < MAX_ATTEMPTS:
        attempt += 1
        print(f"{Fore.BLUE}Tentative #{attempt}{Style.RESET_ALL}")

        try:
            start_time = time.time()

            # Envoyer une requête GET à la page
            response = session.get(url, timeout=3)

            if response.status_code != 200:
                # Si la requête échoue, sortir
                break

            # Parse la réponse pour trouver l'image du CAPTCHA
            soup = BeautifulSoup(response.text, 'html.parser')
            img_tag = soup.find('img', src=re.compile('data:image/png;base64'))
            if not img_tag:
                # Si aucune image CAPTCHA n'est trouvée, sortir
                break

            # Récupérer les données base64 de l'image CAPTCHA
            img_data = img_tag['src'].split(',')[1]
            img_bytes = base64.b64decode(img_data)
            img = Image.open(BytesIO(img_bytes))

            # Prétraiter l'image du CAPTCHA
            processed_img = preprocess_image(img)

            # Enregistrer l'image prétraitée pour inspection (facultatif)
            save_image(processed_img, attempt)

            # Convertir l'image en format compatible avec EasyOCR (numpy array)
            img_array = np.array(processed_img)

            # Utiliser EasyOCR pour décoder le CAPTCHA
            result = reader.readtext(img_array, detail=1, paragraph=False)
            captcha_text = ''.join([text[1] for text in result if text[2] > 0.5]).strip()

            if captcha_text:
                # Préparer les données pour le formulaire
                form_data = {
                    'cametu': captcha_text
                }

                # Envoyer la requête POST avec les données du formulaire
                post_response = session.post(url, data=form_data, timeout=3)

                if post_response.status_code != 200:
                    continue  # Continuer si la requête POST échoue

                # Vérifier la réponse du serveur
                soup_post = BeautifulSoup(post_response.text, 'html.parser')
                text = soup_post.get_text()

                if "Congratz, le flag" in text:
                    # Extraire le flag avec regex
                    match = re.search(r'Congratz, le flag(?: est| =) (\w+)', text)
                    if match:
                        code = match.group(1)
                        print(f"{Fore.CYAN}Code obtenu : {code}{Style.RESET_ALL}")
                    else:
                        print(f"{Fore.CYAN}Code non trouvé dans la réponse.{Style.RESET_ALL}")
                    break  # Sortir de la boucle une fois le code obtenu
                elif "Raté, retente ta chance" in text:
                    # Ne pas afficher les messages d'échec
                    pass
                else:
                    # Ne pas afficher les réponses inattendues
                    pass

            # Vérifier le temps écoulé pour respecter le délai de 3 secondes
            elapsed_time = time.time() - start_time
            if elapsed_time < 3:
                time.sleep(3 - elapsed_time)

        except requests.exceptions.Timeout:
            # Ignorer les délais d'attente expirés sans afficher de message
            continue
        except Exception:
            # Ignorer les autres exceptions sans afficher de message
            continue

    # Calculer le temps total écoulé
    total_elapsed_time = time.time() - start_time_total
    print(f"{Fore.GREEN}Temps total écoulé : {total_elapsed_time:.2f} secondes{Style.RESET_ALL}")

    if attempt >= MAX_ATTEMPTS:
        print(f"{Fore.RED}Nombre maximal de tentatives atteint sans succès.{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Script interrompu par l'utilisateur.{Style.RESET_ALL}")
        sys.exit(0)
