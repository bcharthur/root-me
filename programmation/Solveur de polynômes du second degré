from pwn import *
import re
import math
import time

# Configuration de la connexion
HOST = 'challenge01.root-me.org'
PORT = 52018

def parse_equation(equation):
    # Pattern pour extraire les coefficients et le terme constant
    coeff_pattern = re.compile(r'([-+]?\d+)\.x²\s*([+-]\s*\d+)\.x¹\s*([+-]\s*\d+)\s*=\s*([-+]?\d+)')
    match = coeff_pattern.search(equation)
    if match:
        a = int(match.group(1))
        b = int(match.group(2).replace(' ', ''))
        c = int(match.group(3).replace(' ', ''))
        rhs = int(match.group(4).replace(' ', ''))
        # Ajuster c en soustrayant le côté droit de l'équation
        c = c - rhs
        return a, b, c
    else:
        return None

def solve_quadratic(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        sqrt_disc = math.sqrt(discriminant)
        root1 = (-b + sqrt_disc) / (2*a)
        root2 = (-b - sqrt_disc) / (2*a)
        root1 = round(root1, 3)
        root2 = round(root2, 3)
        # Formater les racines avec trois décimales
        roots = sorted([root1, root2])  # Trier les racines pour la cohérence
        root1_str = f"{roots[0]:.3f}"
        root2_str = f"{roots[1]:.3f}"
        return f"x1: {root1_str} ; x2: {root2_str}"
    elif discriminant == 0:
        root = -b / (2*a)
        root = round(root, 3)
        root_str = f"{root:.3f}"
        return f"x: {root_str}"
    else:
        return "Not possible"

# Fonction pour gérer la connexion et résoudre les équations
def main():
    start_time = time.time()  # Démarrer le chronomètre

    while True:
        try:
            # Initialiser la connexion
            conn = remote(HOST, PORT)

            while True:
                # Lire la sortie du serveur
                server_response = conn.recvline().decode().strip()
                # On n'affiche pas les messages du serveur pour réduire le bruit

                # Rechercher une équation à résoudre
                equation_pattern = re.compile(r'Solve this equation please: (.*)')
                match = equation_pattern.search(server_response)
                if match:
                    equation = match.group(1)

                    # Extraire les coefficients
                    coeffs = parse_equation(equation)
                    if coeffs:
                        a, b, c = coeffs
                        # Afficher l'équation résolue avec les coefficients
                        print(f"Équation : {equation}")
                        print(f"Coefficients : a={a}, b={b}, c={c}")

                        # Résoudre l'équation
                        result = solve_quadratic(a, b, c)

                        # Envoyer le résultat au serveur
                        conn.sendline(result.encode())

                        # Afficher la réponse envoyée au serveur
                        print(f"Envoyé : {result}")
                    else:
                        # Impossible d'analyser l'équation
                        pass

                else:
                    # Vérifier si le flag est présent
                    if "[+] Good job !" in server_response:
                        # Extraire le flag de la réponse du serveur
                        flag_index = server_response.find("flag: ")
                        if flag_index != -1:
                            flag = server_response[flag_index + len("flag: "):]
                            # Afficher la réponse du serveur contenant le flag
                            print(f"Réponse du serveur contenant le flag : {server_response}")
                            # Afficher le temps écoulé
                            elapsed_time = time.time() - start_time
                            print(f"Temps total écoulé : {elapsed_time:.3f} secondes")
                            conn.close()
                            return  # Terminer le script après avoir obtenu le flag
                        else:
                            # Si "flag: " n'est pas trouvé, continuer
                            pass

                    elif "[!]" in server_response:
                        # Réponse incorrecte, le serveur a fermé la connexion
                        conn.close()
                        break  # Sortir de la boucle pour se reconnecter
                    else:
                        # Autres messages du serveur
                        pass  # Ignorer ou traiter si nécessaire

        except EOFError:
            # Fin de la connexion avec le serveur
            break
        except Exception as e:
            # Gérer les autres exceptions si nécessaire
            break

if __name__ == "__main__":
    main()
